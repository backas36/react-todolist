{"version":3,"sources":["TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItemLi","styled","li","TodoItemSpan","span","props","$isCompleted","Button","button","TodoActionIcon","i","TodoItem","todo","handleDeleteTodo","handleToggleIsCompleted","data-todo-id","id","isCompleted","content","className","onClick","TodosWrapper","div","AddTodoWrapper","TodoList","ActionWrapper","App","useRef","useState","value","setValue","filter","setFilter","todos","setTodos","map","type","placeholder","onChange","e","target","current","all","completed","incompleted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56f24a82.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst TodoItemLi = styled.li`\n  display: flex;\n  height: 100%;\n  border-radius: 8px;\n  margin: 8px 0;\n  padding: 6px;\n  border: 1px solid #264653;\n  justify-content: flex-end;\n  align-items: center;\n  box-shadow: 0 1px 9px rgba(0, 0, 0, 0.3);\n  font-size: 1.2rem;\n  flex-wrap:wrap;\n\n  &+&{\n    margin-top: 15px;\n  }\n\n  &:hover .completed-btn,\n  &:hover .trash-btn {\n    display: inline-block;\n  }\n`\n\nconst TodoItemSpan = styled.span`\n  color: #264653;\n  flex: 1;\n  padding-left: 10px;\n  display: flex;\n  align-items: center;\n  height: 35px;\n\n  ${props => props.$isCompleted && `\n      opacity: 0.5;\n      text-decoration: line-through;\n  `\n  }\n`\n\nconst Button = styled.button`\nbackground-color: #4F6A72;\ncolor: #f1faee;\nborder: none;\npadding: 0.3rem;\nmargin-left: 10px;\nborder-radius: 4px;\ncursor: pointer;\nopacity: 0.8;\ntransition: opacity .3s ease;\ndisplay: none;\n  \n  &.trash-btn {\n  background-color: #ca6702;\n  right: 2 %;\n}\n  &:hover{\n  display: inline-block;\n}\n`\n\nconst TodoActionIcon = styled.i`\npointer - events: none;\n`\n\nexport default function TodoItem({ todo, handleDeleteTodo, handleToggleIsCompleted }) {\n\n  return (\n\n    <TodoItemLi data-todo-id={todo.id}>\n      <TodoItemSpan $isCompleted={todo.isCompleted}>{todo.content}</TodoItemSpan>\n\n      <Button\n        className=\"completed-btn\"\n        onClick={() => { handleToggleIsCompleted(todo.id) }}\n      >\n        <TodoActionIcon className=\"fas fa-check \" />\n      </Button>\n      <Button\n        className=\"trash-btn\"\n        onClick={() => { handleDeleteTodo(todo.id) }}>\n        <TodoActionIcon className=\"fas fa-trash \" />\n      </Button>\n    </TodoItemLi>\n\n  )\n}","import styled from 'styled-components';\nimport { useState, useRef } from 'react';\n\nimport TodoItem from './TodoItem';\n\nconst TodosWrapper = styled.div`\n  padding: 20px;\n  background-color: #f1faee;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);\n  width: 400px;\n  border-radius: 8px;\n  margin: 80px 15px;\n  & .title{\n    font-weight: 800;\n  text-align: center;\n  font-size: 2.5rem;\n  color: #264653;\n  }\n`\n\nconst AddTodoWrapper = styled.div`\n  margin: 25px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 2.5rem;\n\n  & input[type=text]{\n    border:1px solid rgba(0, 0, 0, 0.3);\n    height: 100%;\n    width: 80%;\n    border-radius: 4px;\n    padding:0px 10px;\n    font-size: 1.2rem;\n    box-sizing: border-box;\n    transform: all .3s;\n    &:hover{\n      border:3px solid rgba(0, 0, 0, 0.3);\n      border-color:#264653;\n    }\n  }\n\n  & .add-btn{\n    height: 100%;\n    width: 10%;\n    background-color: #264653;\n    color: #f1faee;\n    border: none;\n    box-shadow: 1px 2px 10px rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n    font-size: 1rem;\n    cursor: pointer;\n    opacity: 0.8;\n    transition: opacity 0.3s;\n\n    &:hover{\n       opacity: 1;\n    }\n  }\n`\nconst TodoList = styled.div`\n  margin: 0;\n  padding: 0;\n  & ul {\n    padding:0;\n    margin:0;\n  }\n`\n\nconst ActionWrapper = styled.div`\n  padding: 6px;\n\n  & button {\n    margin-right:6px;\n    padding: 4px 8px;\n    border-radius: 4px;\n    border: none;\n    background-color: #264653;\n    color: #f1faee;\n    box-shadow: 1px 2px 10px rgba(0, 0, 0, 0.3);\n    font-size: 1rem;\n    cursor: pointer;\n    opacity: 0.8;\n    transition: opacity 0.3s;\n    \n    :hover {\n    opacity: 1;\n\n    }\n  }\n`\n\nfunction App() {\n  const id = useRef(3)\n  const [value, setValue] = useState('')\n  const [filter, setFilter] = useState('all')\n  const filterActions = {\n    all: () => true,\n    completed: todo => todo.isCompleted,\n    incompleted: todo => !todo.isCompleted\n  }\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      content: 'todo1',\n      isCompleted: false\n    },\n    {\n      id: 2,\n      content: 'todo2',\n      isCompleted: true\n    }\n  ])\n\n  const handleButtonClick = () => {\n    setTodos([\n      ...todos, {\n        id: id.current,\n        content: value,\n        isCompleted: false,\n      }]\n    )\n    setValue('')\n\n    id.current++\n  }\n\n  const handleInputChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  const handleDeleteTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  const handleToggleIsCompleted = id => {\n    setTodos(todos.map(todo => {\n      if (todo.id !== id) return todo\n      return {\n        ...todo,\n        isCompleted: !todo.isCompleted\n      }\n    }))\n  }\n\n  const handleFilterCompleted = () => {\n    setFilter('completed')\n  }\n\n  const handleFilterInCompleted = () => {\n    setFilter('incompleted')\n  }\n\n  const handleFilterAll = () => {\n    setFilter('all')\n  }\n\n  const handleCleanCompleted = () => {\n    setTodos(todos.filter(todo => !todo.isCompleted))\n  }\n\n\n  return (\n    <div className=\"App\">\n      <TodosWrapper className=\"wrapper\">\n        <h2 className=\"title\">Todo List App</h2>\n        <AddTodoWrapper>\n          <input\n            type=\"text\"\n            className=\"todo-input\"\n            placeholder=\"Enter a task.\"\n            onChange={handleInputChange}\n            value={value}\n          />\n          <button\n            className=\"add-btn\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n          >\n            <i className=\"fas fa-plus\" />\n          </button>\n        </AddTodoWrapper>\n        <ActionWrapper>\n          <button\n            onClick={handleFilterCompleted}\n          >完成</button>\n          <button\n            onClick={handleFilterInCompleted}\n          >未完成</button>\n          <button\n            onClick={handleFilterAll}\n          >全部</button>\n          <button\n            onClick={handleCleanCompleted}\n          >清空已完成</button>\n        </ActionWrapper>\n        <TodoList className=\"todo-list\">\n          <ul className=\"todo-list-ul\">\n            {todos\n              .filter(filterActions[filter])\n              .map(todo => {\n                return (\n                  <TodoItem\n                    key={todo.id}\n                    todo={todo}\n                    handleDeleteTodo={handleDeleteTodo} handleToggleIsCompleted={handleToggleIsCompleted}\n                  />)\n              })}\n          </ul>\n\n        </TodoList>\n      </TodosWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}